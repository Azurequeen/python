{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from utils.imports import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def model_20():    \n",
    "    learning_rate = 1e-5\n",
    "    #optimizer = SGD(lr=learning_rate, momentum = 0.9, decay = 1e-3, nesterov = True)\n",
    "    #optimizer = Adam(lr=learning_rate)\n",
    "    \n",
    "    inputs = Input(shape=(1, 6, 20, 20))\n",
    "    \n",
    "    conv1 = Convolution3D(64, 3, 5, 5, activation = 'elu', border_mode='same')(inputs)\n",
    "    conv1 = BatchNormalization(axis = 1)(conv1)\n",
    "    conv1 = Convolution3D(64, 1, 1, 1, activation = 'elu', border_mode='same')(conv1)\n",
    "    conv1 = BatchNormalization(axis = 1)(conv1)\n",
    "    conv1 = Convolution3D(64, 3, 5, 5, activation = 'elu', border_mode='same')(inputs)\n",
    "    conv1 = BatchNormalization(axis = 1)(conv1)\n",
    "    conv1 = Convolution3D(64, 1, 5, 5, activation = 'elu', border_mode='same')(conv1)\n",
    "    conv1 = BatchNormalization(axis = 1)(conv1)    \n",
    "    \n",
    "    output = Flatten(name='flatten')(conv1)\n",
    "    output = Dropout(0.2)(output)\n",
    "    output = Dense(150)(output)\n",
    "    output = PReLU()(output)\n",
    "    output = BatchNormalization()(output)\n",
    "    output = Dropout(0.2)(output)\n",
    "    output = Dense(150)(output)\n",
    "    output = PReLU()(output)\n",
    "    output = BatchNormalization()(output)\n",
    "    output = Dropout(0.2)(output)\n",
    "    output = Dense(2, activation='softmax', name = 'predictions')(output)\n",
    "    model3d = Model(inputs, output)\n",
    "    model3d.compile(loss='categorical_crossentropy', optimizer = Adam(lr=learning_rate), metrics = ['accuracy'])\n",
    "    return model3d\n",
    "\n",
    "def preds3d_dense(width):\n",
    "    \n",
    "    learning_rate = 1e-5\n",
    "    #optimizer = SGD(lr=learning_rate, momentum = 0.9, decay = 1e-3, nesterov = True)\n",
    "    optimizer = Adam(lr=learning_rate)\n",
    "    \n",
    "    inputs = Input(shape=(1, 36, 36, 36))\n",
    "    conv1 = Convolution3D(width, 3, 3, 3, activation = 'elu', border_mode='same')(inputs)\n",
    "    conv1 = BatchNormalization(axis = 1)(conv1)\n",
    "    conv1 = Convolution3D(width*2, 3, 3, 3, activation = 'elu', border_mode='same')(conv1)\n",
    "    conv1 = BatchNormalization(axis = 1)(conv1)\n",
    "    pool1 = MaxPooling3D(pool_size=(2, 2, 2), border_mode='same')(conv1)\n",
    "    \n",
    "    conv2 = Convolution3D(width*2, 3, 3, 3, activation = 'elu', border_mode='same')(pool1)\n",
    "    conv2 = BatchNormalization(axis = 1)(conv2)\n",
    "    conv2 = Convolution3D(width*4, 3, 3, 3, activation = 'elu', border_mode='same')(conv2)\n",
    "    conv2 = BatchNormalization(axis = 1)(conv2)\n",
    "    pool2 = MaxPooling3D(pool_size=(2, 2, 2), border_mode='same')(conv2)\n",
    "\n",
    "    conv3 = Convolution3D(width*4, 3, 3, 3, activation = 'elu', border_mode='same')(pool2)\n",
    "    conv3 = BatchNormalization(axis = 1)(conv3)\n",
    "    conv3 = Convolution3D(width*8, 3, 3, 3, activation = 'elu', border_mode='same')(conv3)\n",
    "    conv3 = BatchNormalization(axis = 1)(conv3)\n",
    "    pool3 = MaxPooling3D(pool_size=(2, 2, 2), border_mode='same')(conv3)\n",
    "    \n",
    "    conv4 = Convolution3D(width*8, 3, 3, 3, activation = 'elu', border_mode='same')(pool3)\n",
    "    conv4 = BatchNormalization(axis = 1)(conv4)\n",
    "    conv4 = Convolution3D(width*16, 3, 3, 3, activation = 'elu', border_mode='same')(conv4)\n",
    "    conv4 = BatchNormalization(axis = 1)(conv4)\n",
    "    pool4 = MaxPooling3D(pool_size=(8, 8, 8), border_mode='same')(conv4)\n",
    "    \n",
    "    output = Flatten(name='flatten')(pool4)\n",
    "    output = Dropout(0.2)(output)\n",
    "    output = Dense(512)(output)\n",
    "    output = PReLU()(output)\n",
    "    output = BatchNormalization()(output)\n",
    "    output = Dropout(0.2)(output)\n",
    "    output = Dense(128)(output)\n",
    "    output = PReLU()(output)\n",
    "    output = BatchNormalization()(output)\n",
    "    output = Dropout(0.2)(output)\n",
    "    output = Dense(2, activation='softmax', name = 'predictions')(output)\n",
    "    model3d = Model(inputs, output)\n",
    "    model3d.compile(loss='categorical_crossentropy', optimizer = optimizer, metrics = ['accuracy'])\n",
    "    return model3d\n",
    "\n",
    "def classifier(input_shape, kernel_size, pool_size):\n",
    "    model = Sequential()\n",
    "\n",
    "    model.add(Convolution3D(16, kernel_size[0], kernel_size[1], kernel_size[2],\n",
    "                            border_mode='valid',\n",
    "                            input_shape=input_shape))\n",
    "    model.add(Activation('elu'))\n",
    "    model.add(MaxPooling3D(pool_size=pool_size))\n",
    "    model.add(Convolution3D(32, kernel_size[0], kernel_size[1], kernel_size[2]))\n",
    "    model.add(Activation('elu'))\n",
    "    model.add(MaxPooling3D(pool_size=pool_size))\n",
    "    model.add(Convolution3D(64, kernel_size[0], kernel_size[1], kernel_size[2]))\n",
    "    model.add(Activation('elu'))\n",
    "    model.add(MaxPooling3D(pool_size=pool_size))\n",
    "    model.add(Dropout(0.2))\n",
    "\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(512))\n",
    "    model.add(Activation('elu'))\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(Dense(128))\n",
    "    model.add(Activation('elu'))\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(Dense(2))\n",
    "    model.add(Activation('softmax'))\n",
    "    model.compile(loss='categorical_crossentropy',\n",
    "          optimizer='adadelta',\n",
    "          metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "def train_classifier(input_shape):\n",
    "    model = classifier(input_shape, (3, 3, 3), (2, 2, 2))\n",
    "    model.compile(loss='categorical_crossentropy',\n",
    "          optimizer=Adam(lr=1e-5),\n",
    "          metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "output_path = PATH['cls_train_cube_30']\n",
    "output_true = PATH['cls_train_cube_30_true']\n",
    "output_false = PATH['cls_train_cube_30_false']\n",
    "model_paths = PATH['model_paths']\n",
    "model_final = PATH['model_final']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "def get_dirfiles(dir):\n",
    "    file_list = []\n",
    "    subset_path = os.listdir(dir)\n",
    "    for _ in range(len(subset_path)):\n",
    "        if subset_path[_] != '.DS_Store':\n",
    "            file_list.append(dir + subset_path[_])\n",
    "    return file_list\n",
    "\n",
    "def train_generator(output_true,output_false):\n",
    "    file_list_true = get_dirfiles(output_true)[0:10000]\n",
    "    file_list_false = get_dirfiles(output_false)[0:10000]\n",
    "    \n",
    "    #file_list_true = shuffle(file_list_true)\n",
    "    #file_list_false = shuffle(file_list_false)\n",
    "    \n",
    "    nb_true = len(file_list_true) + len(file_list_false)\n",
    "    sample = np.zeros([nb_true,36,36,36])\n",
    "    labels = np.zeros([nb_true,2])\n",
    "    for i in tqdm(range(len(file_list_true))):       \n",
    "        cc= np.load(file_list_true[i])\n",
    "        sample[i] = cc\n",
    "        labels[i] = [0.,1.]\n",
    "    for j in tqdm(range(len(file_list_false))):\n",
    "        bb= np.load(file_list_false[j])\n",
    "        sample[j+len(file_list_true)] = bb \n",
    "        labels[j+len(file_list_true)] = [1.,0.]\n",
    "    sample = np.expand_dims(sample, axis=1)        \n",
    "    return sample,labels\n",
    "\n",
    "def valid_generator(output_true,output_false):\n",
    "    file_list_true = get_dirfiles(output_true)[-1000:]\n",
    "    file_list_false = get_dirfiles(output_false)[-1000:]\n",
    "    \n",
    "    #file_list_true = shuffle(file_list_true)\n",
    "    #file_list_false = shuffle(file_list_false)\n",
    "\n",
    "    nb_true = len(file_list_true) + len(file_list_false)\n",
    "    sample = np.zeros([nb_true,36,36,36])\n",
    "    labels = np.zeros([nb_true,2])\n",
    "  \n",
    "    for i in tqdm(range(len(file_list_true))):       \n",
    "        cc= np.load(file_list_true[i])\n",
    "        sample[i] = cc\n",
    "        labels[i] = [0.,1.]\n",
    "    for j in tqdm(range(len(file_list_false))):\n",
    "        bb= np.load(file_list_false[j])\n",
    "        sample[j+len(file_list_true)] = bb \n",
    "        labels[j+len(file_list_true)] = [1.,0.]\n",
    "    sample = np.expand_dims(sample, axis=1)        \n",
    "    return sample,labels\n",
    "\n",
    "\n",
    "def fenlei_fit(name, load_check = False,batch_size=2, epochs=100,check_name = None):\n",
    "\n",
    "    t = time.time()\n",
    "    callbacks = [EarlyStopping(monitor='val_loss', patience = 8, verbose = 1),\n",
    "                 ModelCheckpoint((model_paths + '{}.h5').format(name),\n",
    "                                 monitor='val_loss',\n",
    "                                 verbose = 0,\n",
    "                                 save_best_only = True)]\n",
    "    if load_check:\n",
    "        check_model = (model_paths + '{}.h5').format(check_name)\n",
    "        model = load_model(check_model)\n",
    "    else:\n",
    "        #model = model_20()\n",
    "        #model = preds3d_dense(48)\n",
    "        model = classifier((1, 36, 36, 36), (3, 3, 3), (2, 2, 2))\n",
    "    x,y = train_generator(output_true,output_false)\n",
    "    model.fit(x=x, y=y, batch_size=batch_size, epochs=epochs,\n",
    "              validation_data=valid_generator(output_true,output_false),verbose=1, callbacks=callbacks, shuffle=True)\n",
    "    \n",
    " \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 306/306 [00:00<00:00, 534.82it/s]\n",
      "100%|██████████| 314/314 [00:00<00:00, 666.02it/s]\n",
      "100%|██████████| 306/306 [00:00<00:00, 2588.03it/s]\n",
      "100%|██████████| 314/314 [00:00<00:00, 2502.51it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 620 samples, validate on 620 samples\n",
      "Epoch 1/100\n",
      "620/620 [==============================] - 5s - loss: 6.6446 - acc: 0.5871 - val_loss: 5.5893 - val_acc: 0.6532\n",
      "Epoch 2/100\n",
      "620/620 [==============================] - 3s - loss: 7.3191 - acc: 0.5452 - val_loss: 7.5911 - val_acc: 0.5290\n",
      "Epoch 3/100\n",
      "620/620 [==============================] - 3s - loss: 7.5131 - acc: 0.5339 - val_loss: 7.5911 - val_acc: 0.5290\n",
      "Epoch 4/100\n",
      "620/620 [==============================] - 3s - loss: 7.1927 - acc: 0.5532 - val_loss: 6.9672 - val_acc: 0.5677\n",
      "Epoch 5/100\n",
      "620/620 [==============================] - 3s - loss: 6.7072 - acc: 0.5839 - val_loss: 6.9672 - val_acc: 0.5677\n",
      "Epoch 6/100\n",
      "620/620 [==============================] - 3s - loss: 6.8632 - acc: 0.5742 - val_loss: 6.9672 - val_acc: 0.5677\n",
      "Epoch 7/100\n",
      "620/620 [==============================] - 3s - loss: 6.9672 - acc: 0.5677 - val_loss: 6.9672 - val_acc: 0.5677\n",
      "Epoch 8/100\n",
      "620/620 [==============================] - 3s - loss: 6.8632 - acc: 0.5742 - val_loss: 6.9672 - val_acc: 0.5677\n",
      "Epoch 9/100\n",
      "620/620 [==============================] - 3s - loss: 6.8372 - acc: 0.5758 - val_loss: 6.9672 - val_acc: 0.5677\n",
      "Epoch 10/100\n",
      "620/620 [==============================] - 3s - loss: 6.8892 - acc: 0.5726 - val_loss: 6.9672 - val_acc: 0.5677\n",
      "Epoch 00009: early stopping\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.models.Sequential at 0x14b7ff5d0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fenlei_fit('Fenge_36_36_36_0615_2', load_check = True, batch_size=128, epochs=100, check_name = 'Fenge_36_36_36_0615')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "file_list_true = get_dirfiles(output_true)\n",
    "file_list_false = get_dirfiles(output_false)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#model_pred = classifier((1, 36, 36, 36), (3, 3, 3), (2, 2, 2))\n",
    "model_pred = load_model(model_paths + 'Fenge_36_36_36_0615_2.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#model_pred.load_weights(model_paths + 'Fenge_0613_2.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.595\n"
     ]
    }
   ],
   "source": [
    "cc = []\n",
    "for i in file_list_false[0:200]:\n",
    "    a=np.load(i)\n",
    "    a=np.expand_dims(a,0)\n",
    "    a=np.expand_dims(a,0)\n",
    "    cc.append(model_pred.predict(a))\n",
    "count = 0\n",
    "for i in cc:\n",
    "    if i[0][0] > 0.9:\n",
    "        count += 1\n",
    "print count*1.0/len(cc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[  1.16834364e-21,   1.00000000e+00]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cc = []\n",
    "for i in file_list_true[0:200]:\n",
    "    a=np.load(i)\n",
    "    a=np.expand_dims(a,0)\n",
    "    a=np.expand_dims(a,0)\n",
    "    cc.append(model_pred.predict(a))\n",
    "count = 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.67\n"
     ]
    }
   ],
   "source": [
    "for i in cc:\n",
    "    if i[0][1] > 0.9:\n",
    "        count += 1\n",
    "print count*1.0/len(cc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 1.,  0.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32),\n",
       " array([[ 0.,  1.]], dtype=float32)]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "314"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(file_list_false)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'trainX' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-53fe2dfb9bc0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmagic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mu'matplotlib inline'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrainX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'trainX' is not defined"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "plt.hist(trainX[20].tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "bb= np.load(file_list_false[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "bb.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
